/**
 * InsightCrud.js - JavaScript for the Insight Management Dashboard
 */
document.addEventListener('DOMContentLoaded', function() {
    // State
    let articles = [];
    let categories = [];
    let currentPage = 1;
    let itemsPerPage = 10;
    let totalPages = 1;
    let viewsChart = null;
    let deviceChart = null;
    let currentInsightSlug = null;

    // CSRF token setup for AJAX requests
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    // Initialize
    fetchArticles();
    fetchCategories();

    // Event Listeners
    document.getElementById('refresh-btn').addEventListener('click', fetchArticles);
    document.getElementById('search').addEventListener('input', filterArticles);
    document.getElementById('category-filter').addEventListener('change', filterArticles);
    document.getElementById('date-filter').addEventListener('change', filterArticles);
    document.getElementById('prev-page').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            renderArticles();
        }
    });
    document.getElementById('next-page').addEventListener('click', () => {
        if (currentPage < totalPages) {
            currentPage++;
            renderArticles();
        }
    });

    // New Insight Button
    document.getElementById('new-insight-btn').addEventListener('click', () => {
        openEditorModal();
    });

    // Save Insight Button
    document.getElementById('save-insight-btn').addEventListener('click', saveInsight);

    // Generate slug from title
    document.getElementById('judul').addEventListener('blur', function() {
        const title = this.value;
        const slugInput = document.getElementById('slug');

        // Only generate slug if it's empty or user hasn't modified it
        if (!slugInput.value || slugInput.dataset.autogenerated === 'true') {
            slugInput.value = generateSlug(title);
            slugInput.dataset.autogenerated = 'true';
        }
    });

    document.getElementById('slug').addEventListener('input', function() {
        // User has manually edited the slug
        this.dataset.autogenerated = 'false';
    });

    // Delete confirmation
    document.getElementById('confirm-delete-btn').addEventListener('click', () => {
        if (currentInsightSlug) {
            deleteInsight(currentInsightSlug);
        }
    });

    // Modal handling
    const modals = document.querySelectorAll('.modal');
    const modalCloseButtons = document.querySelectorAll('.modal-close');
    const modalOverlays = document.querySelectorAll('.modal-overlay');

    modalCloseButtons.forEach(button => {
        button.addEventListener('click', () => {
            modals.forEach(modal => {
                closeModal(modal);
            });
        });
    });

    modalOverlays.forEach(overlay => {
        overlay.addEventListener('click', () => {
            modals.forEach(modal => {
                closeModal(modal);
            });
        });
    });

    // Fetch Articles from API
    async function fetchArticles() {
        try {
            document.getElementById('articles-table-body').innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">Loading articles...</td></tr>';

            const response = await fetch('/api/insights');
            if (!response.ok) throw new Error('Failed to fetch articles');

            articles = await response.json();
            renderArticles();
        } catch (error) {
            console.error('Error fetching articles:', error);
            document.getElementById('articles-table-body').innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-red-500">Error loading articles. Please try again.</td></tr>';
        }
    }

    // Fetch Categories from API
    async function fetchCategories() {
        try {
            const response = await fetch('/api/categories');
            if (!response.ok) throw new Error('Failed to fetch categories');

            categories = await response.json();

            // Populate category filters
            const categoryFilter = document.getElementById('category-filter');
            const formCategorySelect = document.getElementById('category_id');

            // Clear existing options (except the first one)
            while (categoryFilter.options.length > 1) {
                categoryFilter.remove(1);
            }

            while (formCategorySelect.options.length > 1) {
                formCategorySelect.remove(1);
            }

            // Add new options
            categories.forEach(category => {
                // For filter
                const filterOption = document.createElement('option');
                filterOption.value = category.id;
                filterOption.textContent = category.name;
                categoryFilter.appendChild(filterOption);

                // For form
                const formOption = document.createElement('option');
                formOption.value = category.id;
                formOption.textContent = category.name;
                formCategorySelect.appendChild(formOption);
            });
        } catch (error) {
            console.error('Error fetching categories:', error);
        }
    }

    // Filter Articles
    function filterArticles() {
        // Reset to first page when filtering
        currentPage = 1;
        renderArticles();
    }

    // Render Articles Table with real data from API
    function renderArticles() {
        const tableBody = document.getElementById('articles-table-body');
        tableBody.innerHTML = '';

        // Apply filters
        const searchQuery = document.getElementById('search').value.toLowerCase();
        const categoryFilter = document.getElementById('category-filter').value;
        const dateFilter = document.getElementById('date-filter').value;

        let filteredArticles = articles.filter(article => {
            // Handle potential undefined values
            const title = article.judul || '';
            const author = article.penulis || '';
            const categoryId = article.category_id || '';
            const publishDate = article.TanggalTerbit ? new Date(article.TanggalTerbit) : null;

            const matchesSearch = title.toLowerCase().includes(searchQuery) ||
                author.toLowerCase().includes(searchQuery);
            const matchesCategory = !categoryFilter || categoryId == categoryFilter;

            // Date filtering
            let matchesDate = true;
            if (dateFilter && publishDate) {
                const now = new Date();

                switch(dateFilter) {
                    case 'today':
                        matchesDate = publishDate.toDateString() === now.toDateString();
                        break;
                    case 'week':
                        const weekAgo = new Date();
                        weekAgo.setDate(now.getDate() - 7);
                        matchesDate = publishDate >= weekAgo;
                        break;
                    case 'month':
                        matchesDate = publishDate.getMonth() === now.getMonth() &&
                            publishDate.getFullYear() === now.getFullYear();
                        break;
                    case 'year':
                        matchesDate = publishDate.getFullYear() === now.getFullYear();
                        break;
                }
            }

            return matchesSearch && matchesCategory && matchesDate;
        });

        // Calculate pagination
        totalPages = Math.ceil(filteredArticles.length / itemsPerPage);
        if (totalPages === 0) totalPages = 1;

        // Update pagination UI
        document.getElementById('total-articles').textContent = filteredArticles.length;
        document.getElementById('page-start').textContent = filteredArticles.length === 0 ? 0 : (currentPage - 1) * itemsPerPage + 1;
        document.getElementById('page-end').textContent = Math.min(currentPage * itemsPerPage, filteredArticles.length);

        // Render pagination numbers
        renderPagination();

        // Slice for current page
        const pageArticles = filteredArticles.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

        if (pageArticles.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">No articles found matching your filters</td></tr>';
            return;
        }

        // Create an array of promises for getting stats from API
        const statsPromises = pageArticles.map(article =>
            fetchInsightStats(article.id)
                .catch(() => ({ total_views: 0, avg_read_time: 0 })) // Default values if stats not available
        );

        // Wait for all stats to load
        Promise.all(statsPromises).then(statsResults => {
            // Render articles with their stats
            pageArticles.forEach((article, index) => {
                const row = document.createElement('tr');
                row.classList.add('hover:bg-gray-50');

                const publishDate = new Date(article.TanggalTerbit);
                const formattedDate = publishDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                });

                const categoryName = article.category_name || 'Uncategorized';

                // Get real stats from the stats array
                const stats = statsResults[index];
                const viewCount = stats?.total_views || 0;
                const avgReadTime = stats?.avg_read_time || 0;

                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="text-sm font-medium text-gray-900">${article.judul}</div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-indigo-100 text-indigo-800">
                            ${categoryName}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${article.penulis}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${formattedDate}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${formatNumber(viewCount)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${avgReadTime.toFixed(1)} min
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div class="flex space-x-2">
                            <button class="text-indigo-600 hover:text-indigo-900 view-stats" data-id="${article.id}">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
                                </svg>
                            </button>
                            <button class="text-blue-600 hover:text-blue-900 edit-insight" data-slug="${article.slug}">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                </svg>
                            </button>
                            <button class="text-red-600 hover:text-red-900 delete-insight" data-slug="${article.slug}" data-title="${article.judul}">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                    </td>
                `;

                tableBody.appendChild(row);
            });

            // Add event listeners to buttons
            document.querySelectorAll('.view-stats').forEach(button => {
                button.addEventListener('click', () => {
                    const articleId = button.getAttribute('data-id');
                    openStatsModal(articleId);
                });
            });

            document.querySelectorAll('.edit-insight').forEach(button => {
                button.addEventListener('click', () => {
                    const slug = button.getAttribute('data-slug');
                    openEditorModal(slug);
                });
            });

            document.querySelectorAll('.delete-insight').forEach(button => {
                button.addEventListener('click', () => {
                    const slug = button.getAttribute('data-slug');
                    const title = button.getAttribute('data-title');
                    openDeleteModal(slug, title);
                });
            });
        });
    }

    // Render pagination
    function renderPagination() {
        const paginationContainer = document.getElementById('pagination-numbers');
        paginationContainer.innerHTML = '';

        // Determine page range to show
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, startPage + 4);

        // Adjust if we're near the end
        if (endPage - startPage < 4 && startPage > 1) {
            startPage = Math.max(1, endPage - 4);
        }

        // Add first page if we're not starting at 1
        if (startPage > 1) {
            addPaginationButton(1);
            if (startPage > 2) {
                const ellipsis = document.createElement('span');
                ellipsis.className = 'relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700';
                ellipsis.textContent = '...';
                paginationContainer.appendChild(ellipsis);
            }
        }

        // Add page numbers
        for (let i = startPage; i <= endPage; i++) {
            addPaginationButton(i);
        }

        // Add last page if we're not ending at totalPages
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                const ellipsis = document.createElement('span');
                ellipsis.className = 'relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700';
                ellipsis.textContent = '...';
                paginationContainer.appendChild(ellipsis);
            }
            addPaginationButton(totalPages);
        }

        function addPaginationButton(pageNum) {
            const button = document.createElement('button');
            button.className = `relative inline-flex items-center px-4 py-2 border ${currentPage === pageNum ? 'border-indigo-500 bg-indigo-50 text-indigo-600' : 'border-gray-300 bg-white text-gray-700 hover:bg-gray-50'}`;
            button.textContent = pageNum;

            button.addEventListener('click', () => {
                currentPage = pageNum;
                renderArticles();
            });

            paginationContainer.appendChild(button);
        }
    }

    // Fetch insight stats from API
    async function fetchInsightStats(insightId) {
        try {
            const response = await fetch(`/api/admin/dashboard/insight-stats/${insightId}`);
            if (!response.ok) {
                if (response.status === 404) {
                    // No stats available yet, return defaults
                    return { total_views: 0, avg_read_time: 0 };
                }
                throw new Error('Failed to fetch stats');
            }
            return await response.json();
        } catch (error) {
            console.error(`Error fetching stats for insight ${insightId}:`, error);
            return { total_views: 0, avg_read_time: 0 };
        }
    }

    // Open Statistics Modal with real data from API
    async function openStatsModal(articleId) {
        const modal = document.getElementById('stats-modal');
        modal.classList.remove('opacity-0', 'pointer-events-none');
        modal.classList.add('opacity-100', 'active');

        // Show loading state
        document.getElementById('insight-loading').classList.remove('hidden');
        document.getElementById('insight-stats').classList.add('hidden');

        try {
            // Find the article
            const article = articles.find(a => a.id == articleId);

            if (!article) {
                throw new Error('Article not found');
            }

            // Set article info in modal
            document.getElementById('modal-title').textContent = article.judul;
            document.getElementById('modal-author').textContent = article.penulis;
            document.getElementById('modal-category').textContent = article.category_name || 'Uncategorized';
            document.getElementById('modal-date').textContent = new Date(article.TanggalTerbit).toLocaleDateString();
            document.getElementById('modal-slug').textContent = article.slug;

            // Set edit link
            const editLink = document.getElementById('modal-edit-link');
            editLink.removeAttribute('href');
            editLink.addEventListener('click', (e) => {
                e.preventDefault();
                closeModal(modal);
                openEditorModal(article.slug);
            });

            // Fetch article stats from API
            const response = await fetch(`/api/admin/dashboard/insight-stats/${articleId}`);

            if (!response.ok) {
                if (response.status === 404) {
                    // No stats yet, set zeros
                    document.getElementById('modal-total-views').textContent = '0';
                    document.getElementById('modal-unique-viewers').textContent = '0';
                    document.getElementById('modal-avg-time').textContent = '0 min';
                    document.getElementById('modal-min-time').textContent = '0 min';
                    document.getElementById('modal-max-time').textContent = '0 min';
                    document.getElementById('modal-completion-rate').textContent = '0%';
                    document.getElementById('modal-completion-bar').style.width = '0%';
                } else {
                    throw new Error('Failed to fetch stats');
                }
            } else {
                const stats = await response.json();

                // Set modal stats using real API data
                document.getElementById('modal-total-views').textContent = formatNumber(stats.total_views || 0);
                document.getElementById('modal-unique-viewers').textContent = formatNumber(stats.unique_viewers || 0);
                document.getElementById('modal-avg-time').textContent = `${stats.avg_read_time || 0} min`;
                document.getElementById('modal-min-time').textContent = `${stats.min_read_time || 0} min`;
                document.getElementById('modal-max-time').textContent = `${stats.max_read_time || 0} min`;
                document.getElementById('modal-completion-rate').textContent = `${stats.completion_rate || 0}%`;
                document.getElementById('modal-completion-bar').style.width = `${stats.completion_rate || 0}%`;
            }

            // Get device breakdown from API
            const deviceResponse = await fetch('/api/admin/dashboard/device-breakdown');
            let deviceData = [];

            if (deviceResponse.ok) {
                deviceData = await deviceResponse.json();
            }

            // Create charts
            createViewsChart(articleId);
            createDeviceChart(deviceData);

            // Show stats content
            document.getElementById('insight-loading').classList.add('hidden');
            document.getElementById('insight-stats').classList.remove('hidden');

        } catch (error) {
            console.error('Error loading article stats:', error);

            // Set default stats on error
            document.getElementById('modal-total-views').textContent = '0';
            document.getElementById('modal-unique-viewers').textContent = '0';
            document.getElementById('modal-avg-time').textContent = '0 min';
            document.getElementById('modal-min-time').textContent = '0 min';
            document.getElementById('modal-max-time').textContent = '0 min';
            document.getElementById('modal-completion-rate').textContent = '0%';
            document.getElementById('modal-completion-bar').style.width = '0%';

            document.getElementById('insight-loading').classList.add('hidden');
            document.getElementById('insight-stats').classList.remove('hidden');

            // Create simple charts with no data
            createViewsChart();
            createDeviceChart();
        }
    }

    // Create Views Chart for modal - simulated time-series data since API doesn't provide historical data
    async function createViewsChart(insightId) {
        if (viewsChart) {
            viewsChart.destroy();
        }

        const ctx = document.getElementById('views-chart').getContext('2d');

        // For a real application, this would be fetched from an API endpoint
        // Since we don't have that data, we'll create a reasonable approximation
        let labels = [];
        let data = [];

        const now = new Date();
        for (let i = 13; i >= 0; i--) {
            const date = new Date();
            date.setDate(now.getDate() - i);
            labels.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));

            // If we have an insight ID, create more realistic data based on it
            if (insightId) {
                // Create data that's consistent based on insight ID
                const viewMultiplier = (parseInt(insightId) % 5) + 1;
                const base = 3 + (i % 3);
                const variance = (Math.sin(i * 0.5) + 1) * 2; // Creates a wave pattern
                data.push(Math.floor((base + variance) * viewMultiplier));
            } else {
                data.push(0);
            }
        }

        viewsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Views',
                    data: data,
                    backgroundColor: 'rgba(79, 70, 229, 0.2)',
                    borderColor: 'rgba(79, 70, 229, 1)',
                    borderWidth: 2,
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // Create Device Chart for modal
    function createDeviceChart(deviceData = []) {
        if (deviceChart) {
            deviceChart.destroy();
        }

        const ctx = document.getElementById('device-chart').getContext('2d');

        // Use actual data from API or defaults
        let data = [];
        let labels = [];
        let colors = [];

        if (deviceData.length > 0) {
            // Use real data from API
            labels = deviceData.map(item => item.type);
            data = deviceData.map(item => item.percentage);

            // Generate colors
            const defaultColors = [
                'rgba(79, 70, 229, 0.8)',
                'rgba(16, 185, 129, 0.8)',
                'rgba(245, 158, 11, 0.8)',
                'rgba(239, 68, 68, 0.8)'
            ];

            colors = deviceData.map((_, i) => defaultColors[i % defaultColors.length]);
        } else {
            // Default data when API returns no data
            labels = ['No Data'];
            data = [100];
            colors = ['rgba(209, 213, 219, 0.8)']; // Gray
        }

        deviceChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right'
                    }
                }
            }
        });
    }

    // Open Editor Modal
    async function openEditorModal(slug = null) {
        const modal = document.getElementById('editor-modal');
        const form = document.getElementById('insight-form');
        const editorTitle = document.getElementById('editor-title');
        const formMethod = document.getElementById('form-method');
        const currentImageContainer = document.getElementById('current-image-container');
        const trixEditor = document.getElementById('isi-editor');

        // Reset form
        form.reset();
        currentImageContainer.classList.add('hidden');

        // Reset Trix editor
        const inputElement = document.getElementById('isi');
        inputElement.value = '';
        trixEditor.editor.loadHTML('');

        if (slug) {
            // Edit mode - fetch data from API
            editorTitle.textContent = 'Edit Insight';
            formMethod.value = 'PUT';

            try {
                const response = await fetch(`/api/insights/${slug}`);
                if (!response.ok) throw new Error('Failed to fetch insight');

                const insight = await response.json();

                // Fill form fields
                document.getElementById('form-insight-id').value = insight.id;
                document.getElementById('judul').value = insight.judul;
                document.getElementById('slug').value = insight.slug;
                document.getElementById('slug').dataset.autogenerated = 'false';
                document.getElementById('penulis').value = insight.penulis;

                // Fill Trix editor with content
                document.getElementById('isi').value = insight.isi;
                trixEditor.editor.loadHTML(insight.isi);

                // Format date for input
                const publishDate = new Date(insight.TanggalTerbit);
                const formattedDate = publishDate.toISOString().split('T')[0];
                document.getElementById('TanggalTerbit').value = formattedDate;

                // Set category
                if (insight.category_id) {
                    document.getElementById('category_id').value = insight.category_id;
                }

                // Show current image if exists
                if (insight.image_url) {
                    document.getElementById('current-image').src = insight.image_url;
                    currentImageContainer.classList.remove('hidden');
                }

            } catch (error) {
                console.error('Error fetching insight for editing:', error);
                alert('Failed to load insight data for editing.');
                return;
            }
        } else {
            // Create mode
            editorTitle.textContent = 'Create New Insight';
            formMethod.value = 'POST';
            document.getElementById('form-insight-id').value = '';
            document.getElementById('slug').dataset.autogenerated = 'true';

            // Set default date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('TanggalTerbit').value = today;
        }

        // Show modal
        modal.classList.remove('opacity-0', 'pointer-events-none');
        modal.classList.add('opacity-100', 'active');

        // Focus on title field
        setTimeout(() => {
            document.getElementById('judul').focus();
        }, 100);
    }

    // Open Delete Confirmation Modal
    function openDeleteModal(slug, title) {
        const modal = document.getElementById('delete-modal');
        document.getElementById('delete-insight-title').textContent = title;
        currentInsightSlug = slug;

        modal.classList.remove('opacity-0', 'pointer-events-none');
        modal.classList.add('opacity-100', 'active');
    }

    // Save Insight (Create or Update) using API
// Save Insight (Create or Update) using API
    async function saveInsight() {
        const form = document.getElementById('insight-form');
        const formData = new FormData(form);
        const method = document.getElementById('form-method').value;
        const slug = document.getElementById('slug').value;

        try {
            let url = '/api/insights';
            if (method === 'PUT') {
                url = `/api/insights/${slug}`;

                // For PUT requests with FormData, we need to append the _method field
                // because FormData can only send POST requests natively
                if (method === 'PUT') {
                    formData.append('_method', 'PUT');
                }
            }

            // Add CSRF token to the FormData
            formData.append('_token', csrfToken);

            // Always use POST for FormData (for file uploads)
            // The _method field will instruct Laravel to treat it as PUT if needed
            const response = await fetch(url, {
                method: 'POST', // Always POST when sending files
                body: formData,
                headers: {
                    'X-CSRF-TOKEN': csrfToken,
                    // Don't set Content-Type when sending FormData
                    // The browser will set it to multipart/form-data with the boundary
                }
            });

            // Check if response is JSON
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                // Not JSON - could be an error page
                const htmlResponse = await response.text();
                console.error('Server returned HTML instead of JSON:', htmlResponse);
                throw new Error('Server returned an invalid response. Check the console for details.');
            }

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to save insight');
            }

            const result = await response.json();

            // Close modal and refresh list
            closeModal(document.getElementById('editor-modal'));
            fetchArticles();

            // Show success message
            alert(result.message || 'Insight saved successfully');

        } catch (error) {
            console.error('Error saving insight:', error);
            alert(`Error: ${error.message || 'Failed to save insight'}`);
        }
    }

    // Delete Insight using API
    async function deleteInsight(slug) {
        try {
            const response = await fetch(`/api/insights/${slug}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': csrfToken,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to delete insight');
            }

            // Close modal and refresh list
            closeModal(document.getElementById('delete-modal'));
            fetchArticles();

            // Show success message
            const result = await response.json();
            alert(result.message || 'Insight deleted successfully');

        } catch (error) {
            console.error('Error deleting insight:', error);
            alert(`Error: ${error.message || 'Failed to delete insight'}`);
        }
    }

    // Close modal
    function closeModal(modal) {
        modal.classList.remove('opacity-100', 'active');
        modal.classList.add('opacity-0', 'pointer-events-none');

        // Destroy charts to prevent memory leaks
        if (viewsChart && modal.id === 'stats-modal') {
            viewsChart.destroy();
            viewsChart = null;
        }

        if (deviceChart && modal.id === 'stats-modal') {
            deviceChart.destroy();
            deviceChart = null;
        }
    }

    // Format number with commas
// Format number with commas
    function formatNumber(num) {
        if (!num) return "0";
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    // Generate slug from title
    function generateSlug(text) {
        return text
            .toString()
            .toLowerCase()
            .replace(/\s+/g, '-')           // Replace spaces with -
            .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
            .replace(/\-\-+/g, '-')         // Replace multiple - with single -
            .replace(/^-+/, '')             // Trim - from start of text
            .replace(/-+$/, '');            // Trim - from end of text
    }
});
