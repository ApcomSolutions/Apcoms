/**
 * InsightCrud.js - JavaScript for the Insight Management Dashboard
 */

// Konfigurasi Trix Editor hanya untuk gambar
document.addEventListener('trix-initialize', function(event) {
    // Dapatkan toolbar dari Trix Editor
    const toolbarElement = event.target.toolbarElement;

    // Tetapkan atribut accept untuk file input hanya menerima gambar
    const fileInputs = toolbarElement.querySelectorAll('input[type=file]');
    fileInputs.forEach(function(fileInput) {
        fileInput.setAttribute('accept', 'image/*');
    });
});

// Batasi upload hanya untuk gambar
document.addEventListener('trix-file-accept', function(event) {
    // Periksa apakah file yang diunggah adalah gambar
    const file = event.file;
    const acceptedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'];

    if (!file || !acceptedTypes.includes(file.type)) {
        // Batalkan unggahan jika bukan gambar
        event.preventDefault();
        alert('Hanya file gambar yang dapat diunggah (JPG, PNG, GIF, WEBP, SVG)');
    }
});
document.addEventListener('DOMContentLoaded', function() {
    // Check if we're on the insights management page
    const articlesTableBody = document.getElementById('articles-table-body');

    // Only initialize if we're on the correct page
    if (!articlesTableBody) {
        console.log('Not on the insights management page, skipping initialization');
        return; // Exit early if we're not on the right page
    }

    console.log('Initializing Insight Management dashboard');

    // State
    let articles = [];
    let categories = [];
    let currentPage = 1;
    let itemsPerPage = 10;
    let totalPages = 1;
    let viewsChart = null;
    let deviceChart = null;
    let currentInsightSlug = null;

    // CSRF token setup for AJAX requests
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    if (!csrfToken) {
        console.warn('CSRF token not found. AJAX requests might fail.');
    }

    // Initialize
    fetchArticles();
    fetchCategories();

    // Event Listeners - make sure elements exist before adding listeners
    const refreshBtn = document.getElementById('refresh-btn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', fetchArticles);
    }

    const searchInput = document.getElementById('search');
    if (searchInput) {
        searchInput.addEventListener('input', filterArticles);
    }

    const categoryFilter = document.getElementById('category-filter');
    if (categoryFilter) {
        categoryFilter.addEventListener('change', filterArticles);
    }

    const dateFilter = document.getElementById('date-filter');
    if (dateFilter) {
        dateFilter.addEventListener('change', filterArticles);
    }

    const prevPage = document.getElementById('prev-page');
    if (prevPage) {
        prevPage.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                renderArticles();
            }
        });
    }

    const nextPage = document.getElementById('next-page');
    if (nextPage) {
        nextPage.addEventListener('click', () => {
            if (currentPage < totalPages) {
                currentPage++;
                renderArticles();
            }
        });
    }

    // New Insight Button
    const newInsightBtn = document.getElementById('new-insight-btn');
    if (newInsightBtn) {
        newInsightBtn.addEventListener('click', () => {
            openEditorModal();
        });
    }

    // Save Insight Button
    const saveInsightBtn = document.getElementById('save-insight-btn');
    if (saveInsightBtn) {
        saveInsightBtn.addEventListener('click', saveInsight);
    }

    // Generate slug from title
    const judul = document.getElementById('judul');
    if (judul) {
        judul.addEventListener('blur', function() {
            const title = this.value;
            const slugInput = document.getElementById('slug');

            // Only generate slug if it's empty or user hasn't modified it
            if (slugInput && (!slugInput.value || slugInput.dataset.autogenerated === 'true')) {
                slugInput.value = generateSlug(title);
                slugInput.dataset.autogenerated = 'true';
            }
        });
    }

    const slugInput = document.getElementById('slug');
    if (slugInput) {
        slugInput.addEventListener('input', function() {
            // User has manually edited the slug
            this.dataset.autogenerated = 'false';
        });
    }

    // Delete confirmation
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', () => {
            if (currentInsightSlug) {
                deleteInsight(currentInsightSlug);
            }
        });
    }

    // Delete Image Button
    const deleteImageBtn = document.getElementById('delete-image-btn');
    if (deleteImageBtn) {
        deleteImageBtn.addEventListener('click', function() {
            // Set the hidden input value to 1 to indicate image should be deleted
            const deleteImageInput = document.getElementById('delete_image');
            if (deleteImageInput) {
                deleteImageInput.value = '1';
            }

            // Hide the current image container
            const currentImageContainer = document.getElementById('current-image-container');
            if (currentImageContainer) {
                currentImageContainer.classList.add('hidden');
            }

            // Reset the file input
            const imageInput = document.getElementById('image');
            if (imageInput) {
                imageInput.value = '';
            }
        });
    }

    // Modal handling
    const modals = document.querySelectorAll('.modal');
    const modalCloseButtons = document.querySelectorAll('.modal-close');
    const modalOverlays = document.querySelectorAll('.modal-overlay');

    modalCloseButtons.forEach(button => {
        button.addEventListener('click', () => {
            modals.forEach(modal => {
                closeModal(modal);
            });
        });
    });

    modalOverlays.forEach(overlay => {
        overlay.addEventListener('click', () => {
            modals.forEach(modal => {
                closeModal(modal);
            });
        });
    });

    // Validasi untuk input gambar utama (featured image)
    const imageInput = document.getElementById('image');
    if (imageInput) {
        imageInput.addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                const acceptedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'];

                if (!acceptedTypes.includes(file.type)) {
                    alert('Hanya file gambar yang diperbolehkan (JPG, PNG, GIF, WEBP, SVG)');
                    // Reset file input
                    this.value = '';
                } else {
                    // Preview gambar jika valid
                    const currentImage = document.getElementById('current-image');
                    const currentImageContainer = document.getElementById('current-image-container');
                    const deleteImageInput = document.getElementById('delete_image');

                    if (deleteImageInput) {
                        deleteImageInput.value = '0'; // Reset delete flag if a new image is selected
                    }

                    if (currentImage && currentImageContainer) {
                        // Tampilkan preview gambar yang baru dipilih
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            currentImage.src = e.target.result;
                            currentImageContainer.classList.remove('hidden');
                        };
                        reader.readAsDataURL(file);
                    }
                }
            }
        });
    }

    // Fetch Articles from API
    async function fetchArticles() {
        try {
            if (!articlesTableBody) return;

            articlesTableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">Loading articles...</td></tr>';

            const response = await fetch('/api/insights');
            if (!response.ok) throw new Error('Failed to fetch articles');

            articles = await response.json();
            renderArticles();
        } catch (error) {
            console.error('Error fetching articles:', error);
            if (articlesTableBody) {
                articlesTableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-red-500">Error loading articles. Please try again.</td></tr>';
            }
        }
    }

    // Fetch Categories from API
    async function fetchCategories() {
        try {
            const response = await fetch('/api/categories');
            if (!response.ok) throw new Error('Failed to fetch categories');

            categories = await response.json();

            // Populate category filters
            const categoryFilter = document.getElementById('category-filter');
            const formCategorySelect = document.getElementById('category_id');

            if (!categoryFilter || !formCategorySelect) {
                console.warn('Category filters not found in the DOM');
                return;
            }

            // Clear existing options (except the first one)
            while (categoryFilter.options.length > 1) {
                categoryFilter.remove(1);
            }

            while (formCategorySelect.options.length > 1) {
                formCategorySelect.remove(1);
            }

            // Add new options
            categories.forEach(category => {
                // For filter
                const filterOption = document.createElement('option');
                filterOption.value = category.id;
                filterOption.textContent = category.name;
                categoryFilter.appendChild(filterOption);

                // For form
                const formOption = document.createElement('option');
                formOption.value = category.id;
                formOption.textContent = category.name;
                formCategorySelect.appendChild(formOption);
            });
        } catch (error) {
            console.error('Error fetching categories:', error);
        }
    }

    // Filter Articles
    function filterArticles() {
        // Reset to first page when filtering
        currentPage = 1;
        renderArticles();
    }

    // Render Articles Table with real data from API
    function renderArticles() {
        if (!articlesTableBody) return;

        articlesTableBody.innerHTML = '';

        const searchInput = document.getElementById('search');
        const categoryFilterElement = document.getElementById('category-filter');
        const dateFilterElement = document.getElementById('date-filter');

        if (!searchInput || !categoryFilterElement || !dateFilterElement) {
            console.warn('Filter elements not found');
            return;
        }

        // Apply filters
        const searchQuery = searchInput.value.toLowerCase();
        const categoryFilter = categoryFilterElement.value;
        const dateFilter = dateFilterElement.value;

        let filteredArticles = articles.filter(article => {
            // Handle potential undefined values
            const title = article.judul || '';
            const author = article.penulis || '';
            const categoryId = article.category_id || '';
            const publishDate = article.TanggalTerbit ? new Date(article.TanggalTerbit) : null;

            const matchesSearch = title.toLowerCase().includes(searchQuery) ||
                author.toLowerCase().includes(searchQuery);
            const matchesCategory = !categoryFilter || categoryId == categoryFilter;

            // Date filtering
            let matchesDate = true;
            if (dateFilter && publishDate) {
                const now = new Date();

                switch(dateFilter) {
                    case 'today':
                        matchesDate = publishDate.toDateString() === now.toDateString();
                        break;
                    case 'week':
                        const weekAgo = new Date();
                        weekAgo.setDate(now.getDate() - 7);
                        matchesDate = publishDate >= weekAgo;
                        break;
                    case 'month':
                        matchesDate = publishDate.getMonth() === now.getMonth() &&
                            publishDate.getFullYear() === now.getFullYear();
                        break;
                    case 'year':
                        matchesDate = publishDate.getFullYear() === now.getFullYear();
                        break;
                }
            }

            return matchesSearch && matchesCategory && matchesDate;
        });

        // Calculate pagination
        totalPages = Math.ceil(filteredArticles.length / itemsPerPage);
        if (totalPages === 0) totalPages = 1;

        // Update pagination UI
        const totalArticlesElement = document.getElementById('total-articles');
        const pageStartElement = document.getElementById('page-start');
        const pageEndElement = document.getElementById('page-end');

        if (totalArticlesElement) {
            totalArticlesElement.textContent = filteredArticles.length;
        }

        if (pageStartElement) {
            pageStartElement.textContent = filteredArticles.length === 0 ? 0 : (currentPage - 1) * itemsPerPage + 1;
        }

        if (pageEndElement) {
            pageEndElement.textContent = Math.min(currentPage * itemsPerPage, filteredArticles.length);
        }

        // Render pagination numbers
        renderPagination();

        // Slice for current page
        const pageArticles = filteredArticles.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

        if (pageArticles.length === 0) {
            articlesTableBody.innerHTML = '<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">No articles found matching your filters</td></tr>';
            return;
        }

        // Create an array of promises for getting stats from API
        const statsPromises = pageArticles.map(article =>
            fetchInsightStats(article.id)
                .catch(() => ({ total_views: 0, avg_read_time: 0 })) // Default values if stats not available
        );

        // Wait for all stats to load
        Promise.all(statsPromises).then(statsResults => {
            // Render articles with their stats
            pageArticles.forEach((article, index) => {
                const row = document.createElement('tr');
                row.classList.add('hover:bg-gray-50');

                const publishDate = new Date(article.TanggalTerbit);
                const formattedDate = publishDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                });

                const categoryName = article.category_name || 'Uncategorized';

                // Get real stats from the stats array
                const stats = statsResults[index];
                const viewCount = stats?.total_views || 0;
                const avgReadTime = stats?.avg_read_time || 0;

                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="text-sm font-medium text-gray-900">${article.judul}</div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-indigo-100 text-indigo-800">
                            ${categoryName}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${article.penulis}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${formattedDate}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${formatNumber(viewCount)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${avgReadTime.toFixed(1)} min
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div class="flex space-x-2">
                            <button class="text-indigo-600 hover:text-indigo-900 view-stats" data-id="${article.id}">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
                                </svg>
                            </button>
                            <button class="text-blue-600 hover:text-blue-900 edit-insight" data-slug="${article.slug}">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                </svg>
                            </button>
                            <button class="text-red-600 hover:text-red-900 delete-insight" data-slug="${article.slug}" data-title="${article.judul}">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                    </td>
                `;

                articlesTableBody.appendChild(row);
            });

            // Add event listeners to buttons
            document.querySelectorAll('.view-stats').forEach(button => {
                button.addEventListener('click', () => {
                    const articleId = button.getAttribute('data-id');
                    openStatsModal(articleId);
                });
            });

            document.querySelectorAll('.edit-insight').forEach(button => {
                button.addEventListener('click', () => {
                    const slug = button.getAttribute('data-slug');
                    openEditorModal(slug);
                });
            });

            document.querySelectorAll('.delete-insight').forEach(button => {
                button.addEventListener('click', () => {
                    const slug = button.getAttribute('data-slug');
                    const title = button.getAttribute('data-title');
                    openDeleteModal(slug, title);
                });
            });
        });
    }

    // Render pagination
    function renderPagination() {
        const paginationContainer = document.getElementById('pagination-numbers');
        if (!paginationContainer) return;

        paginationContainer.innerHTML = '';

        // Determine page range to show
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, startPage + 4);

        // Adjust if we're near the end
        if (endPage - startPage < 4 && startPage > 1) {
            startPage = Math.max(1, endPage - 4);
        }

        // Add first page if we're not starting at 1
        if (startPage > 1) {
            addPaginationButton(1);
            if (startPage > 2) {
                const ellipsis = document.createElement('span');
                ellipsis.className = 'relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700';
                ellipsis.textContent = '...';
                paginationContainer.appendChild(ellipsis);
            }
        }

        // Add page numbers
        for (let i = startPage; i <= endPage; i++) {
            addPaginationButton(i);
        }

        // Add last page if we're not ending at totalPages
        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                const ellipsis = document.createElement('span');
                ellipsis.className = 'relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700';
                ellipsis.textContent = '...';
                paginationContainer.appendChild(ellipsis);
            }
            addPaginationButton(totalPages);
        }

        function addPaginationButton(pageNum) {
            const button = document.createElement('button');
            button.className = `relative inline-flex items-center px-4 py-2 border ${currentPage === pageNum ? 'border-indigo-500 bg-indigo-50 text-indigo-600' : 'border-gray-300 bg-white text-gray-700 hover:bg-gray-50'}`;
            button.textContent = pageNum;

            button.addEventListener('click', () => {
                currentPage = pageNum;
                renderArticles();
            });

            paginationContainer.appendChild(button);
        }
    }

    // Tambahkan di awal file insight-crud.js
    async function fetchInsightStats(insightId) {
        try {
            const response = await fetch(`/api/admin/dashboard/insight-stats/${insightId}`, {
                method: 'GET',
                credentials: 'same-origin',
                headers: {
                    'Accept': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                }
            });

            if (!response.ok) {
                if (response.status === 404) {
                    return { total_views: 0, avg_read_time: 0 };
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.error(`Error fetching stats for insight ${insightId}:`, error);
            return { total_views: 0, avg_read_time: 0 };
        }
    }

    // Open Statistics Modal with real data from API
    async function openStatsModal(articleId) {
        console.log("Opening stats modal for article ID:", articleId);

        const modal = document.getElementById('stats-modal');
        if (!modal) {
            console.error('Stats modal not found');
            return;
        }

        modal.classList.remove('opacity-0', 'pointer-events-none');
        modal.classList.add('opacity-100', 'active');

        // Get required elements
        const loadingElement = document.getElementById('insight-loading');
        const statsElement = document.getElementById('insight-stats');

        if (!loadingElement || !statsElement) {
            console.error('Loading or stats elements not found');
            return;
        }

        // Show loading state
        loadingElement.classList.remove('hidden');
        statsElement.classList.add('hidden');

        try {
            // Find the article
            const article = articles.find(a => a.id == articleId);

            if (!article) {
                throw new Error('Article not found');
            }

            // Get required elements for modal information
            const modalTitleElement = document.getElementById('modal-title');
            const modalAuthorElement = document.getElementById('modal-author');
            const modalCategoryElement = document.getElementById('modal-category');
            const modalDateElement = document.getElementById('modal-date');
            const modalSlugElement = document.getElementById('modal-slug');

            if (!modalTitleElement || !modalAuthorElement || !modalCategoryElement ||
                !modalDateElement || !modalSlugElement) {
                console.error('Required modal elements not found');
                throw new Error('Required modal elements not found');
            }

            // Set article info in modal
            modalTitleElement.textContent = article.judul;
            modalAuthorElement.textContent = article.penulis;
            modalCategoryElement.textContent = article.category_name || 'Uncategorized';
            modalDateElement.textContent = new Date(article.TanggalTerbit).toLocaleDateString();
            modalSlugElement.textContent = article.slug;

            // Set edit link
            const editLink = document.getElementById('modal-edit-link');
            if (editLink) {
                editLink.removeAttribute('href');
                editLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    closeModal(modal);
                    openEditorModal(article.slug);
                });
            }

            // Fetch article stats from API
            console.log(`Fetching stats for article ${articleId}`);
            const response = await fetch(`/api/admin/dashboard/insight-stats/${articleId}`);

            // Get stat elements
            const totalViewsElement = document.getElementById('modal-total-views');
            const uniqueViewersElement = document.getElementById('modal-unique-viewers');
            const avgTimeElement = document.getElementById('modal-avg-time');
            const minTimeElement = document.getElementById('modal-min-time');
            const maxTimeElement = document.getElementById('modal-max-time');
            const completionRateElement = document.getElementById('modal-completion-rate');
            const completionBarElement = document.getElementById('modal-completion-bar');

            if (!totalViewsElement || !uniqueViewersElement || !avgTimeElement ||
                !minTimeElement || !maxTimeElement || !completionRateElement || !completionBarElement) {
                console.error('Stat elements not found');
                throw new Error('Stat elements not found');
            }

            if (!response.ok) {
                if (response.status === 404) {
                    // No stats yet, set zeros
                    totalViewsElement.textContent = '0';
                    uniqueViewersElement.textContent = '0';
                    avgTimeElement.textContent = '0 min';
                    minTimeElement.textContent = '0 min';
                    maxTimeElement.textContent = '0 min';
                    completionRateElement.textContent = '0%';
                    completionBarElement.style.width = '0%';
                } else {
                    throw new Error('Failed to fetch stats');
                }
            } else {
                const stats = await response.json();
                console.log("Received stats:", stats);

                // Set modal stats using real API data
                totalViewsElement.textContent = formatNumber(stats.total_views || 0);
                uniqueViewersElement.textContent = formatNumber(stats.unique_viewers || 0);
                avgTimeElement.textContent = `${stats.avg_read_time || 0} min`;
                minTimeElement.textContent = `${stats.min_read_time || 0} min`;
                maxTimeElement.textContent = `${stats.max_read_time || 0} min`;
                completionRateElement.textContent = `${stats.completion_rate || 0}%`;
                completionBarElement.style.width = `${stats.completion_rate || 0}%`;
            }

            // Make sure the chart containers have dimensions before rendering
            const viewsChartElement = document.getElementById('views-chart');
            const deviceChartElement = document.getElementById('device-chart');

            if (viewsChartElement) viewsChartElement.style.height = '250px';
            if (deviceChartElement) deviceChartElement.style.height = '250px';

            // Show stats content first so containers are visible
            loadingElement.classList.add('hidden');
            statsElement.classList.remove('hidden');

            // Wait a bit for the DOM to update and containers to be visible
            setTimeout(async () => {
                // Fetch real history data from API
                try {
                    console.log(`Fetching activity time series for article ${articleId}`);
                    const historyResponse = await fetch(`/api/admin/dashboard/activity-time-series?period=week&insight_id=${articleId}`);

                    if (historyResponse.ok) {
                        const historyData = await historyResponse.json();
                        console.log("Received time series data:", historyData);

                        // Make sure any existing chart is destroyed first
                        if (viewsChart) {
                            viewsChart.destroy();
                            viewsChart = null;
                        }

                        createViewsChartWithRealData(historyData.views);
                    } else {
                        console.warn("Failed to get activity data, falling back to simulated data");
                        // Make sure any existing chart is destroyed before creating a new one
                        if (viewsChart) {
                            viewsChart.destroy();
                            viewsChart = null;
                        }
                        createViewsChart(articleId);
                    }
                } catch (error) {
                    console.error('Failed to fetch real history data:', error);
                    // Make sure any existing chart is destroyed before creating a new one
                    if (viewsChart) {
                        viewsChart.destroy();
                        viewsChart = null;
                    }
                    createViewsChart(articleId);
                }

                // Get device breakdown from API
                try {
                    console.log("Fetching device breakdown");
                    const deviceResponse = await fetch('/api/admin/dashboard/device-breakdown');
                    let deviceData = [];

                    if (deviceResponse.ok) {
                        deviceData = await deviceResponse.json();
                        console.log("Received device data:", deviceData);
                    }

                    // Create device chart
                    if (deviceChart) {
                        deviceChart.destroy();
                        deviceChart = null;
                    }
                    createDeviceChart(deviceData);
                } catch (error) {
                    console.error('Failed to fetch device breakdown:', error);
                    if (deviceChart) {
                        deviceChart.destroy();
                        deviceChart = null;
                    }
                    createDeviceChart([]);
                }
            }, 200); // 200ms delay for DOM to update

        } catch (error) {
            console.error('Error loading article stats:', error);

            // Get stat elements and set defaults
            const elements = {
                'modal-total-views': '0',
                'modal-unique-viewers': '0',
                'modal-avg-time': '0 min',
                'modal-min-time': '0 min',
                'modal-max-time': '0 min',
                'modal-completion-rate': '0%'
            };

            Object.entries(elements).forEach(([id, value]) => {
                const element = document.getElementById(id);
                if (element) element.textContent = value;
            });

            const completionBarElement = document.getElementById('modal-completion-bar');
            if (completionBarElement) completionBarElement.style.width = '0%';
            if (loadingElement) loadingElement.classList.add('hidden');
            if (statsElement) statsElement.classList.remove('hidden');

            // Create simple charts with no data
            setTimeout(() => {
                createViewsChart();
                createDeviceChart();
            }, 200);
        }
    }

    // Create Views Chart with real data from API - FIXED VERSION
    function createViewsChartWithRealData(viewsData) {
        console.log("Creating chart with real data:", viewsData);

        if (viewsChart) {
            viewsChart.destroy();
            viewsChart = null; // Ensure reference is cleared
        }

        const viewsChartElement = document.getElementById('views-chart');
        if (!viewsChartElement) {
            console.error('Views chart element not found');
            return;
        }

        // Check if container is visible and has dimensions
        const containerWidth = viewsChartElement.clientWidth;
        const containerHeight = viewsChartElement.clientHeight;

        console.log(`Chart container dimensions: ${containerWidth}x${containerHeight}`);

        if (containerWidth === 0 || containerHeight === 0) {
            console.warn('Chart container has zero dimensions, setting minimum height');
            viewsChartElement.style.height = '250px';
        }

        // Extract dates and values from the data
        const labels = viewsData.map(item => {
            const date = new Date(item.x);
            return date.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric'
            });
        });

        const values = viewsData.map(item => item.y);

        const ctx = viewsChartElement.getContext('2d');

        // Check if we have any non-zero data points
        const hasData = values.some(value => value > 0);
        console.log("Chart has data points:", hasData);

        // If no data, create a message instead
        if (!hasData && values.length === 0) {
            console.log("No data available, showing message");
            const noDataMessage = document.createElement('div');
            noDataMessage.className = 'flex items-center justify-center h-full';
            noDataMessage.innerHTML = '<p class="text-gray-500">No view data available for this period</p>';

            // Clear canvas and append message
            viewsChartElement.innerHTML = '';
            viewsChartElement.appendChild(noDataMessage);
            return;
        }

        // Create the chart with simplified configuration
        viewsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Views',
                    data: values,
                    backgroundColor: 'rgba(79, 70, 229, 0.2)',
                    borderColor: 'rgba(79, 70, 229, 1)',
                    borderWidth: 2,
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Views'
                        }
                    }
                }
            }
        });

        console.log("Chart created successfully");
    }

    // Create Views Chart for modal (fallback)
    function createViewsChart(insightId) {
        if (viewsChart) {
            viewsChart.destroy();
            viewsChart = null;
        }

        const viewsChartElement = document.getElementById('views-chart');
        if (!viewsChartElement) {
            console.error('Views chart element not found');
            return;
        }

        const ctx = viewsChartElement.getContext('2d');

        // Create default empty chart
        const labels = [];
        const data = [];

        // Generate some basic date labels for the last 7 days
        const now = new Date();
        for (let i = 6; i >= 0; i--) {
            const date = new Date();
            date.setDate(now.getDate() - i);
            labels.push(date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }));
            data.push(0);
        }

        viewsChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Views',
                    data: data,
                    backgroundColor: 'rgba(79, 70, 229, 0.2)',
                    borderColor: 'rgba(79, 70, 229, 1)',
                    borderWidth: 2,
                    tension: 0.3,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // Create Device Chart for modal
    function createDeviceChart(deviceData = []) {
        console.log("Creating device chart with data:", deviceData);

        if (deviceChart) {
            deviceChart.destroy();
            deviceChart = null;
        }

        const deviceChartElement = document.getElementById('device-chart');
        if (!deviceChartElement) {
            console.error('Device chart element not found');
            return;
        }

        // Check if container is visible and has dimensions
        const containerWidth = deviceChartElement.clientWidth;
        const containerHeight = deviceChartElement.clientHeight;

        console.log(`Device chart container dimensions: ${containerWidth}x${containerHeight}`);

        if (containerWidth === 0 || containerHeight === 0) {
            console.warn('Device chart container has zero dimensions, setting minimum height');
            deviceChartElement.style.height = '250px';
        }

        const ctx = deviceChartElement.getContext('2d');

        // Use actual data from API or defaults
        let data = [];
        let labels = [];
        let colors = [];

        if (deviceData.length > 0) {
            // Use real data from API
            labels = deviceData.map(item => item.type);
            data = deviceData.map(item => item.percentage);

            // Generate colors
            const defaultColors = [
                'rgba(79, 70, 229, 0.8)',
                'rgba(16, 185, 129, 0.8)',
                'rgba(245, 158, 11, 0.8)',
                'rgba(239, 68, 68, 0.8)'
            ];

            colors = deviceData.map((_, i) => defaultColors[i % defaultColors.length]);
        } else {
            // Default data when API returns no data
            labels = ['No Data'];
            data = [100];
            colors = ['rgba(209, 213, 219, 0.8)']; // Gray
        }

        deviceChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            boxWidth: 12,
                            padding: 15
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `${context.label}: ${context.raw}%`;
                            }
                        }
                    }
                }
            }
        });

        console.log("Device chart created successfully");
    }

    // Open Editor Modal
    async function openEditorModal(slug = null) {
        const modal = document.getElementById('editor-modal');
        if (!modal) {
            console.error('Editor modal not found');
            return;
        }

        const form = document.getElementById('insight-form');
        const editorTitle = document.getElementById('editor-title');
        const formMethod = document.getElementById('form-method');
        const currentImageContainer = document.getElementById('current-image-container');
        const trixEditor = document.getElementById('isi-editor');
        const deleteImageInput = document.getElementById('delete_image');

        if (!form || !editorTitle || !formMethod || !currentImageContainer || !trixEditor) {
            console.error('Required editor modal elements not found');
            return;
        }

        // Reset delete image flag
        if (deleteImageInput) {
            deleteImageInput.value = '0';
        }

        // Set the form's enctype attribute programmatically
        form.setAttribute('enctype', 'multipart/form-data');

        // Reset form
        form.reset();
        currentImageContainer.classList.add('hidden');

        // Reset Trix editor
        const inputElement = document.getElementById('isi');
        if (inputElement) {
            inputElement.value = '';
            trixEditor.editor.loadHTML('');
        }

        if (slug) {
            // Edit mode - fetch data from API
            editorTitle.textContent = 'Edit Insight';
            formMethod.value = 'PUT';

            try {
                const response = await fetch(`/api/insights/${slug}`);
                if (!response.ok) throw new Error('Failed to fetch insight');

                const insight = await response.json();

                const formInsightId = document.getElementById('form-insight-id');
                const judulInput = document.getElementById('judul');
                const slugInput = document.getElementById('slug');
                const penulisInput = document.getElementById('penulis');
                const isiInput = document.getElementById('isi');
                const tanggalTerbitInput = document.getElementById('TanggalTerbit');
                const categoryIdInput = document.getElementById('category_id');
                const currentImage = document.getElementById('current-image');

                if (!formInsightId || !judulInput || !slugInput || !penulisInput ||
                    !isiInput || !tanggalTerbitInput || !categoryIdInput || !currentImage) {
                    console.error('Form elements not found');
                    throw new Error('Form elements not found');
                }

                // Fill form fields
                formInsightId.value = insight.id;
                judulInput.value = insight.judul;
                slugInput.value = insight.slug;
                slugInput.dataset.autogenerated = 'false';
                penulisInput.value = insight.penulis;

                // Fill Trix editor with content
                isiInput.value = insight.isi;
                trixEditor.editor.loadHTML(insight.isi);

                // Format date for input
                const publishDate = new Date(insight.TanggalTerbit);
                const formattedDate = publishDate.toISOString().split('T')[0];
                tanggalTerbitInput.value = formattedDate;

                // Set category
                if (insight.category_id) {
                    categoryIdInput.value = insight.category_id;
                }

                // Show current image if exists
                if (insight.image_url) {
                    currentImage.src = insight.image_url;
                    currentImageContainer.classList.remove('hidden');
                }

            } catch (error) {
                console.error('Error fetching insight for editing:', error);
                if (window.AppError) {
                    AppError.showError('Failed to load insight data for editing.');
                } else {
                    alert('Failed to load insight data for editing.');
                }
                return;
            }
        } else {
            // Create mode
            editorTitle.textContent = 'Create New Insight';
            formMethod.value = 'POST';

            const formInsightId = document.getElementById('form-insight-id');
            const slugInput = document.getElementById('slug');
            const tanggalTerbitInput = document.getElementById('TanggalTerbit');

            if (formInsightId) {
                formInsightId.value = '';
            }

            if (slugInput) {
                slugInput.dataset.autogenerated = 'true';
            }

            // Set default date to today
            const today = new Date().toISOString().split('T')[0];
            if (tanggalTerbitInput) {
                tanggalTerbitInput.value = today;
            }
        }

        // Show modal
        modal.classList.remove('opacity-0', 'pointer-events-none');
        modal.classList.add('opacity-100', 'active');

        // Focus on title field
        setTimeout(() => {
            const judulInput = document.getElementById('judul');
            if (judulInput) {
                judulInput.focus();
            }
        }, 100);
    }

    // Open Delete Confirmation Modal
    function openDeleteModal(slug, title) {
        const modal = document.getElementById('delete-modal');
        const titleElement = document.getElementById('delete-insight-title');

        if (!modal || !titleElement) {
            console.error('Delete modal elements not found');
            return;
        }

        titleElement.textContent = title;
        currentInsightSlug = slug;

        modal.classList.remove('opacity-0', 'pointer-events-none');
        modal.classList.add('opacity-100', 'active');
    }


    // Save Insight (Create or Update) using API
    async function saveInsight() {
        const form = document.getElementById('insight-form');
        const formMethodElement = document.getElementById('form-method');
        const slugInput = document.getElementById('slug');

        if (!form || !formMethodElement || !slugInput) {
            console.error('Required form elements not found');
            return;
        }

        // Explicitly set the form's enctype attribute
        form.setAttribute('enctype', 'multipart/form-data');

        const formData = new FormData(form);
        const method = formMethodElement.value;
        const slug = slugInput.value;

        try {
            // PENTING: Pastikan URL dimulai dengan /api/ untuk mengakses API routes
            let url = '/api/insights';
            if (method === 'PUT') {
                url = `/api/insights/${slug}`;
                // Add the _method field for Laravel to handle as PUT
                formData.append('_method', 'PUT');
            }

            // Add the CSRF token
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            formData.append('_token', csrfToken);

            // Debug log
            console.log("Form method:", method);
            console.log("Submitting to URL:", url);

            // Show what's being submitted (for debugging)
            for (let [key, value] of formData.entries()) {
                if (value instanceof File) {
                    console.log(`${key}:`, value.name ? `File: ${value.name}` : 'No file selected');
                } else {
                    console.log(`${key}:`, value);
                }
            }

            // Send the request
            const response = await fetch(url, {
                method: 'POST', // Always POST with FormData
                body: formData,
                // Do NOT set Content-Type header with FormData - browser will set it with correct boundary
                headers: {
                    'X-CSRF-TOKEN': csrfToken
                },
                credentials: 'same-origin' // Include cookies
            });

            // Log the response status for debugging
            console.log("Response status:", response.status);

            // Check content type
            const contentType = response.headers.get('content-type');
            console.log("Response content type:", contentType);

            // PENTING: Clone response sebelum membacanya jika perlu membaca multiple kali
            // atau cukup baca sekali saja dan simpan hasilnya

            // Baca response berdasarkan content type
            let result;
            if (contentType && contentType.includes('application/json')) {
                // Parse as JSON if content type is JSON
                result = await response.json();
            } else {
                // Get as text if not JSON
                const textResponse = await response.text();
                console.log('Response text:', textResponse);

                // Coba parse JSON dari text response jika mungkin
                try {
                    result = JSON.parse(textResponse);
                } catch (e) {
                    console.error('Not valid JSON:', textResponse);
                    // Untuk response non-JSON (HTML, dll), buat objek sederhana
                    result = {
                        success: response.ok,
                        message: response.ok ? 'Operation successful' : 'Operation failed'
                    };
                }
            }

            if (!response.ok) {
                // Handle error response
                if (result && result.errors) {
                    // Format validation errors
                    const errorMessages = Object.values(result.errors).flat().join('\n');
                    throw new Error(`Validation failed:\n${errorMessages}`);
                } else {
                    throw new Error((result && result.message) || 'Failed to save insight');
                }
            }

            // Success - close modal and refresh list
            const editorModal = document.getElementById('editor-modal');
            if (editorModal) {
                closeModal(editorModal);
            }
            fetchArticles();

            // Show success message using CustomErrorHandler
            if (window.ErrorHandler) {
                // Use custom error handler if available
                window.ErrorHandler.showSuccess((result && result.message) || 'Insight saved successfully');
            } else if (window.AppError) {
                // Use AppError wrapper if available
                window.AppError.showSuccess((result && result.message) || 'Insight saved successfully');
            } else {
                // Fallback to regular alert
                alert((result && result.message) || 'Insight saved successfully');
            }

        } catch (error) {
            console.error('Error saving insight:', error);

            // Handle the error using CustomErrorHandler
            if (window.ErrorHandler) {
                // Use custom error handler if available
                window.ErrorHandler.showError(`Error: ${error.message || 'Failed to save insight'}`);
            } else if (window.AppError) {
                // Use AppError wrapper if available
                window.AppError.showError(`Error: ${error.message || 'Failed to save insight'}`);
            } else {
                // Fallback to regular alert
                alert(`Error: ${error.message || 'Failed to save insight'}`);
            }
        }
    }


    // Delete Insight using API
    async function deleteInsight(slug) {
        try {
            // PENTING: Pastikan URL dimulai dengan /api/ untuk mengakses API routes
            const url = `/api/insights/${slug}`;
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');

            console.log("Sending delete request to:", url);

            const response = await fetch(url, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': csrfToken || '',
                    'Content-Type': 'application/json'
                }
            });

            // Log response untuk debugging
            console.log("Delete response status:", response.status);

            let result;
            try {
                result = await response.json();
                console.log("Delete response:", result);
            } catch (error) {
                const textResponse = await response.text();
                console.error('Invalid JSON response:', textResponse);
                throw new Error('Server returned an invalid response');
            }

            if (!response.ok) {
                throw new Error(result.message || 'Failed to delete insight');
            }

            // Close modal and refresh list
            const deleteModal = document.getElementById('delete-modal');
            if (deleteModal) {
                closeModal(deleteModal);
            }
            fetchArticles();

            // Show success message
            window.ErrorHandler.showSuccess(result.message || 'Insight deleted successfully');

        } catch (error) {
            console.error('Error deleting insight:', error);
            window.ErrorHandler.showError(`Error: ${error.message || 'Failed to delete insight'}`);
        }
    }

    // Close modal
    function closeModal(modal) {
        modal.classList.remove('opacity-100', 'active');
        modal.classList.add('opacity-0', 'pointer-events-none');

        // Reset delete_image value when modal is closed
        if (modal.id === 'editor-modal') {
            const deleteImageInput = document.getElementById('delete_image');
            if (deleteImageInput) {
                deleteImageInput.value = '0'; // Reset delete image flag when modal is closed
            }
        }

        // Destroy charts to prevent memory leaks
        if (viewsChart && modal.id === 'stats-modal') {
            viewsChart.destroy();
            viewsChart = null;
        }

        if (deviceChart && modal.id === 'stats-modal') {
            deviceChart.destroy();
            deviceChart = null;
        }
    }

    // Format number with commas
    function formatNumber(num) {
        if (!num) return "0";
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    // Generate slug from title
    function generateSlug(text) {
        return text
            .toString()
            .toLowerCase()
            .replace(/\s+/g, '-')           // Replace spaces with -
            .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
            .replace(/\-\-+/g, '-')         // Replace multiple - with single -
            .replace(/^-+/, '')             // Trim - from start of text
            .replace(/-+$/, '');            // Trim - from end of text
    }
});
